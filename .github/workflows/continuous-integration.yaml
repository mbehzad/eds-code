name: Continuous Integration

on:
  push:
    # only branch pushes, not tags
    branches:
      - '**'

jobs:
  install-and-cache-deps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node version from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --prefer-offline

  lint:
    runs-on: ubuntu-latest
    needs: install-and-cache-deps
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Lint project
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: install-and-cache-deps
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Run unit tests
        run: npm run test:ci

  build-doc:
      runs-on: ubuntu-latest
      needs: install-and-cache-deps
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            restore-keys: ${{ runner.os }}-node-

        - name: Build doc
          run: npm run build:doc

  # on every push,
  # build and copy dist to deploy git repo
  deploy-to-hlx-repo:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    # needs: install-and-cache-deps
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v4
        with:
          path: code-repo

      - name: Checkout deploy repository
        uses: actions/checkout@v4
        with:
          repository: mbehzad/eds-deploy
          path: deploy-repo
          token: ${{secrets.DEPLOY_REPO_PUSH_TOKEN}}

      - name: Use Node version from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: 'code-repo/.nvmrc'

      - name: Install dependencies
        run: |
          cd code-repo
          npm ci --prefer-offline

      - name: Build project
        run: |
          cd code-repo
          npm run build

      - name: Setup git user
        run: |
          cd deploy-repo
          git config --local user.name "EDS CI/CD"
          git config --local user.email "eds-ci@diva-e.com"

      - name: Create branch
        run: |
          cd deploy-repo
          git switch --force-create ${{ github.ref_name }}

      - name: Clean deploy git directory
        # clean the content of the checked out deploy folder, except its .git folder
        run: find deploy-repo -not -name deploy-repo -not -name .git -not -path "*.git/*" -delete

      - name: Copy files from code repo do deploy repo
        # copy all files, except the .git, .github workflows which shouldn't be used in the deploy repo, node_modules which aren't needed and src which explicitly should be deployed
        run: rsync --recursive --verbose code-repo/ deploy-repo --exclude .git --exclude .github --exclude src --exclude node_modules

      - name: Stage files
        run: |
          cd deploy-repo
          git add .
          # dist is on git ignore list but should be committed to the deploy repo
          git add --force ./dist

      - name: Commit and push
        run: |
          cd deploy-repo
          git commit --message="CI Build (for ${{ github.event.head_commit.id }})" --allow-empty
          git push --force
